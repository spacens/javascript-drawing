{"version":3,"sources":["js/canvas.js","js/inputs.js","js/ui.js","js/controlHistory.js","js/app.js"],"names":["Canvas","lastX","lastY","direction","isDrawing","canvas","document","querySelector","ctx","getContext","clear","lineCap","lineJoin","lineWidth","strokeStyle","needFirstPoint","e","ui","strLineChecked","beginPath","moveTo","lineTo","offsetX","offsetY","stroke","x","y","clearRect","width","height","theCanvas","addEventListener","draw","bind","clearCanvas","drawStraightLine","Inputs","colorInputs","querySelectorAll","widthInput","heightInput","capWidth","event","holdingSlider","target","value","keyCode","displayChanges","inputs","changeCapSize","forEach","input","id","fillStyle","fillRect","Ui","menu","newProjectWindow","aboutMenu","drawingField","isCanvasCreated","newProjectBtn","startDrawingBtn","goBackBtn","aboutBtn","save","exit","closeAbout","capTypes","lineTypes","checkboxes","setCanvasProperties","style","display","displayCanvas","action","classList","add","remove","textContent","cap","checked","name","filter","box","href","toDataURL","download","change","capSizeText","drawColorText","fillColorText","openAndCloseMenu","body","resetData","saveDrawing","className","filterBoxes","displayNewProject","History","redo_list","undo_list","undoBtn","redoBtn","list","keep_redo","push","restoreState","pop","length","saveState","restore_state","src","img","Image","setAttribute","onload","drawImage","ctrlKey","undo","cvs","redo","history","keyCapture","colorInfo","pickingColor","getElementPosition","obj","curleft","curtop","offsetParent","offsetLeft","offsetTop","getEventLocation","element","pos","pageX","pageY","rgbToHex","r","g","b","toString","eventLocation","pixelData","getImageData","data","coord","hex","slice"],"mappings":"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","file":"app.4307a1e3.map","sourceRoot":"..\\src","sourcesContent":["import { ui } from './ui';\r\n\r\nclass Canvas {\r\n    constructor() {\r\n        this.lastX = 0;\r\n        this.lastY = 0;\r\n        this.direction = true;\r\n        this.isDrawing = false;\r\n        this.canvas = document.querySelector(\"#canvas\");\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.clear = document.querySelector(\"#clearCanvas\");\r\n\r\n        // Canvas property\r\n        this.ctx.lineCap = \"round\";\r\n        this.ctx.lineJoin = \"miter\";\r\n        this.ctx.lineWidth = 20;\r\n        this.ctx.strokeStyle = \"#000000\";\r\n\r\n        // Drawing a straight line\r\n        this.needFirstPoint = true;\r\n    }\r\n\r\n    // Draw on the canvas\r\n    draw(e) {\r\n        // If user is not drawing anymore, end the function\r\n        if(!this.isDrawing) return;\r\n\r\n        if(!ui.strLineChecked) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.lastX, this.lastY);\r\n            this.ctx.lineTo(e.offsetX, e.offsetY);\r\n            this.ctx.stroke();\r\n    \r\n            // Re-save the position\r\n            this.lastX = e.offsetX;\r\n            this.lastY = e.offsetY;\r\n        }\r\n    }\r\n\r\n    // Draw a straight line between two button clicks\r\n    drawStraightLine(x, y) {\r\n        if(ui.strLineChecked) {\r\n            if(this.needFirstPoint) {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(x, y);\r\n                this.needFirstPoint = false;\r\n            } else {\r\n                this.ctx.lineTo(x, y)\r\n                this.ctx.stroke();\r\n                this.needFirstPoint = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Clear the canvas\r\n    clearCanvas() {\r\n        // Clear the canvas\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    }\r\n\r\n}\r\nexport const theCanvas = new Canvas();\r\n\r\n// Canvas (drawing) event listeners\r\ntheCanvas.canvas.addEventListener(\"mousedown\", e => {\r\n    theCanvas.isDrawing = true;\r\n    theCanvas.lastX = e.offsetX;\r\n    theCanvas.lastY = e.offsetY;\r\n})\r\ntheCanvas.canvas.addEventListener(\"mousemove\", theCanvas.draw.bind(theCanvas));\r\ntheCanvas.canvas.addEventListener(\"mouseup\", () => theCanvas.isDrawing = false);\r\ntheCanvas.canvas.addEventListener(\"mouseout\", () => theCanvas.isDrawing = false);\r\ntheCanvas.clear.addEventListener(\"click\", theCanvas.clearCanvas.bind(theCanvas));\r\ntheCanvas.canvas.addEventListener(\"click\", e => {\r\n    let x = e.offsetX;\r\n    let y = e.offsetY;\r\n    theCanvas.drawStraightLine(x, y);\r\n})\r\n","import { ui } from './ui';\r\nimport { theCanvas } from './canvas'\r\n\r\nclass Inputs {\r\n    constructor() {\r\n        this.colorInputs = document.querySelectorAll(`input[type=\"color\"]`);\r\n        this.widthInput = document.querySelector(\"#width-input\");\r\n        this.heightInput = document.querySelector(\"#height-input\");\r\n        this.capWidth = document.querySelector(\"#capWidth\");\r\n    }\r\n\r\n    // Change the drawing cap size\r\n    changeCapSize(e) {\r\n        e = e || event;\r\n\r\n        // Change cap size using the slider\r\n        if(ui.holdingSlider) {\r\n            theCanvas.ctx.lineWidth = e.target.value;\r\n        }\r\n\r\n        // If user presses [, decrease size. If user presses ], increase cap size\r\n        if(e.keyCode === 219) {\r\n            theCanvas.ctx.lineWidth--;\r\n            this.capWidth.value = theCanvas.ctx.lineWidth;\r\n        } else if (e.keyCode === 221) {\r\n            theCanvas.ctx.lineWidth++;\r\n            this.capWidth.value = theCanvas.ctx.lineWidth;\r\n        }\r\n\r\n        ui.displayChanges(\"capSize\");\r\n    }\r\n}\r\n\r\nexport const inputs = new Inputs();\r\n\r\n// Input field\r\ninputs.capWidth.addEventListener(\"mousedown\", () => ui.holdingSlider = true)\r\ninputs.capWidth.addEventListener(\"mouseup\", () => ui.holdingSlider = false)\r\ninputs.capWidth.addEventListener(\"mousemove\", inputs.changeCapSize.bind(inputs));\r\ninputs.capWidth.addEventListener(\"click\", e => {\r\n    theCanvas.ctx.lineWidth = e.target.value;\r\n\r\n    ui.displayChanges(\"capSize\");\r\n});\r\ndocument.addEventListener(\"keydown\", inputs.changeCapSize.bind(inputs));\r\n\r\n// Choose colors for drawing and for the background fill\r\ninputs.colorInputs.forEach(input => input.addEventListener(\"change\", () => {\r\n    if(input.id === 'colorPalette') {\r\n        theCanvas.ctx.strokeStyle = input.value;\r\n\r\n        // Display changes\r\n        ui.displayChanges(\"draw-color\");\r\n    } else if (input.id === \"backgroundColor\") {\r\n        theCanvas.ctx.fillStyle = input.value;\r\n        theCanvas.ctx.fillRect(0, 0, theCanvas.canvas.width, theCanvas.canvas.height);\r\n\r\n        // Display changes\r\n        ui.displayChanges(\"fill-color\", input.value);\r\n    }\r\n}))","import { theCanvas } from './canvas'\r\nimport { inputs } from './inputs';\r\n\r\nclass Ui {\r\n    constructor() {\r\n        this.menu = document.querySelector(\".main-menu\");\r\n        this.newProjectWindow = document.querySelector(\".new-project_window\");\r\n        this.aboutMenu = document.querySelector(\".about-menu\");\r\n        this.drawingField = document.querySelector(\"#main\");\r\n        this.isCanvasCreated = false;\r\n\r\n        // Buttons\r\n        this.newProjectBtn = document.querySelector(\"#new-project\");\r\n        this.startDrawingBtn = document.querySelector(\"#draw\");\r\n        this.goBackBtn = document.querySelector(\"#goBack\");\r\n        this.aboutBtn = document.querySelector(\"#about\");\r\n        this.save = document.querySelector(\"#saveDrawing\");\r\n        this.exit = document.querySelector(\"#exit\");\r\n        this.closeAbout = document.querySelector(\"#close-about\");\r\n\r\n        // Inputs\r\n        this.holdingSlider = false;\r\n        this.capTypes = document.querySelectorAll(\".cap-type\");\r\n        this.lineTypes = document.querySelectorAll(\".line-type\");\r\n        this.checkboxes = document.querySelectorAll(`input[type=\"checkbox\"]`);\r\n\r\n        // Checkbox for toggling between straight line mode on/off\r\n        this.strLineChecked = false;\r\n    }\r\n\r\n    // Reset data\r\n    resetData() {\r\n        // Set defualt canvas properties\r\n        this.setCanvasProperties();\r\n\r\n        theCanvas.canvas.width = 800;\r\n        theCanvas.canvas.height = 500;\r\n        inputs.widthInput.value = 800;\r\n        inputs.heightInput.value = 500;\r\n\r\n        // Reset the information initial canvas was already created\r\n        this.isCanvasCreated = false;\r\n\r\n        // Clear the warning text\r\n        document.querySelector(\"#show-warning\").style.display = \"none\";\r\n\r\n        // Display the reseted changes in the UI (text for the inputs)\r\n        ui.displayChanges(\"all\");\r\n        this.displayCanvas(\"hide\");\r\n    }\r\n\r\n    // Display new project menu\r\n    displayNewProject(action) {\r\n        if(action === \"display\") {\r\n            this.newProjectWindow.style.display = \"block\";\r\n            this.menu.style.display = \"none\";\r\n\r\n            if(this.isCanvasCreated) {\r\n                document.querySelector(\"#show-warning\").style.display = \"block\";\r\n                this.newProjectWindow.classList.add(\"active\");\r\n            }\r\n        } else if (action === \"hide\") {\r\n            this.newProjectWindow.style.display = \"none\";\r\n            \r\n            if(!this.isCanvasCreated) {\r\n                this.menu.style.display = \"block\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // Display canvas\r\n    displayCanvas(action) {\r\n        if(action === \"display\") {\r\n            this.drawingField.style.display = \"grid\";\r\n            this.newProjectWindow.style.display = \"none\";\r\n\r\n            // Pre-set the canvas properties\r\n            this.setCanvasProperties();\r\n\r\n            // Fill in the canvas with color\r\n            theCanvas.ctx.fillStyle = \"#fff\";\r\n            theCanvas.ctx.fillRect(0, 0, theCanvas.canvas.width, theCanvas.canvas.height);\r\n\r\n            // Mark that the initial canvas was created\r\n            this.isCanvasCreated = true;\r\n\r\n        } else if (action === \"hide\") {\r\n            this.menu.style.display = \"block\";\r\n            this.drawingField.style.display = \"none\";\r\n            this.newProjectWindow.classList.remove(\"active\");\r\n\r\n            // If user clicked EXIT, clear the canvas\r\n            theCanvas.clearCanvas();\r\n        }\r\n    }\r\n\r\n    // Set canvas properties and size\r\n    setCanvasProperties() {\r\n        // Set canvas properties\r\n        theCanvas.canvas.width = inputs.widthInput.value;\r\n        theCanvas.canvas.height = inputs.heightInput.value;\r\n        theCanvas.ctx.lineCap = \"round\";\r\n        theCanvas.ctx.lineJoin = \"miter\";\r\n        theCanvas.ctx.lineWidth = 20;\r\n        inputs.capWidth.value = theCanvas.ctx.lineWidth;\r\n        document.querySelector(\"#current-capSize\").textContent =`${theCanvas.ctx.lineWidth}px`;\r\n\r\n        // Reset the values to the default ones\r\n        inputs.capWidth.value = theCanvas.ctx.lineWidth;\r\n        inputs.colorInputs.forEach(input => input.value = \"#000000\");\r\n\r\n        // Reset the checkboxes to default ones\r\n        const checkboxes = [...this.checkboxes];\r\n        checkboxes.forEach(cap => cap.checked = false);\r\n        this.lineTypes[0].checked = true;\r\n        this.capTypes[0].checked = true;\r\n\r\n        this.displayChanges('all');\r\n    }\r\n\r\n    // About menu\r\n    openAndCloseMenu(action) {\r\n        if(action === \"open\") {\r\n            this.aboutMenu.style.display = \"block\";\r\n        } else if (action === \"close\") {\r\n            this.aboutMenu.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    // Filter the clicked checkboxes and pass their name as a line cap and line join property\r\n    filterBoxes(id, name) {\r\n        let boxes = null;\r\n        if(name === \"cap-type\") {\r\n            // Convert checkboxes node list to an array\r\n            boxes = [...this.capTypes];\r\n\r\n            // Filter the checkboxes\r\n            boxes.filter(box => {\r\n                if(box.id !== id) {\r\n                    // Uncheck all the boxes that DON'T match the ID of the clicked box.\r\n                    box.checked = false;\r\n                } else if(box.id === id) {\r\n                    // If user clicks on the same box that is already checked,\r\n                    // it CAN'T be un-checked\r\n                    box.checked = true;\r\n\r\n                    // Use the clicked box name as a property for the cap type\r\n                    theCanvas.ctx.lineCap = box.name;\r\n                }\r\n            })\r\n        } else if (name === \"line-type\") {\r\n            // Convert checkboxes node list to an array\r\n            boxes = [...this.lineTypes];\r\n\r\n            // Filter the checkboxes\r\n            boxes.filter(box => {\r\n                if(box.id !== id) {\r\n                    // Uncheck all the boxes that DON'T match the ID of the clicked box.\r\n                    box.checked = false;\r\n                } else if(box.id === id) {\r\n                    // If user clicks on the same box that is already checked,\r\n                    // it can not be un-checked\r\n                    box.checked = true;\r\n\r\n                    // Use the clicked box name as a property for the line type\r\n                    theCanvas.ctx.lineJoin = box.name;\r\n                }\r\n            })\r\n        } else {\r\n            boxes = [...this.checkboxes];\r\n\r\n            boxes.filter(box => {\r\n                if(box.id === \"strLine\") {\r\n                    this.strLineChecked = !this.strLineChecked;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Save the drawing\r\n    saveDrawing() {\r\n        this.save.href = theCanvas.canvas.toDataURL();\r\n        this.save.download = \"mypainting.png\"; \r\n    }\r\n\r\n    // Display changes made to the cap size, drawing color and background fill.\r\n    displayChanges(change, value) {\r\n        const capSizeText = document.querySelector(\"#current-capSize\");\r\n        const drawColorText = document.querySelector(\"#current-drawColor\");\r\n        const fillColorText = document.querySelector(\"#current-bgColor\");\r\n\r\n        if(change === \"capSize\") {\r\n            // Change the text value for the cap size\r\n            capSizeText.textContent = `${theCanvas.ctx.lineWidth}px`;\r\n        } else if (change === \"draw-color\") {\r\n            drawColorText.textContent = `${theCanvas.ctx.strokeStyle}`;\r\n        } else if (change === \"fill-color\") {\r\n            fillColorText.textContent = `${value}`;\r\n        } else if (change === \"all\") {\r\n            capSizeText.textContent = `${theCanvas.ctx.lineWidth}px`;\r\n            drawColorText.textContent = `${theCanvas.ctx.strokeStyle}`;\r\n            fillColorText.textContent = `none`;\r\n        }\r\n    }\r\n}\r\n\r\nexport const ui = new Ui();\r\n\r\n// About menu event listeners\r\nui.aboutBtn.addEventListener(\"click\", ui.openAndCloseMenu.bind(ui, \"open\"));;\r\nui.closeAbout.addEventListener(\"click\", ui.openAndCloseMenu.bind(ui, \"close\"));\r\ndocument.body.addEventListener(\"keyup\", e => {\r\n    e = e || event;\r\n    if (e.keyCode === 27) {\r\n        ui.openAndCloseMenu(\"close\");\r\n    }\r\n})\r\n\r\n// Draw menu listeners\r\nui.startDrawingBtn.addEventListener(\"click\", ui.displayCanvas.bind(ui, \"display\"));\r\nui.exit.addEventListener(\"click\", ui.resetData.bind(ui));\r\nui.save.addEventListener(\"click\", ui.saveDrawing.bind(ui));\r\nui.checkboxes.forEach(box => box.addEventListener(\"click\", () => {\r\n    const id = box.id;\r\n    const name = box.className;\r\n    ui.filterBoxes(id, name);\r\n}))\r\n\r\n// Toggle between main menu and new project window that leads towrads the canvas\r\nui.newProjectBtn.addEventListener(\"click\", ui.displayNewProject.bind(ui, 'display'));\r\nui.goBackBtn.addEventListener(\"click\", ui.displayNewProject.bind(ui, 'hide'));\r\n\r\ndocument.querySelector(\"#canvas-size\").addEventListener(\"click\", ui.displayNewProject.bind(ui, \"display\"));","import { theCanvas } from './canvas'; \r\n\r\nclass History { \r\n    constructor() {\r\n        this.redo_list = [];\r\n        this.undo_list = [];\r\n        \r\n        // Undo & Redo buttons\r\n        this.undoBtn = document.querySelector(\"#undo\");\r\n        this.redoBtn = document.querySelector(\"#redo\");\r\n    }\r\n\r\n    // Save the state\r\n    saveState(canvas, list, keep_redo) {\r\n        keep_redo = keep_redo || false;\r\n        if(!keep_redo) {\r\n            this.redo_list = [];\r\n        }\r\n        \r\n        (list || this.undo_list).push(canvas.toDataURL());  \r\n    }\r\n\r\n    // Undo action\r\n    undo(canvas, ctx) {\r\n        this.restoreState(canvas, ctx, this.undo_list, this.redo_list);\r\n    }\r\n\r\n    // Redo action\r\n    redo(canvas, ctx) {\r\n      this.restoreState(canvas, ctx, this.redo_list, this.undo_list);\r\n    }\r\n\r\n    // Restore the state\r\n    restoreState(canvas, ctx, pop, push) {\r\n        if(pop.length) {\r\n            this.saveState(canvas, push, true);\r\n            var restore_state = pop.pop();\r\n            const src = restore_state;\r\n    \r\n            const img = new Image();\r\n            img.setAttribute('src', src);\r\n            img.onload = function() {\r\n              ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);  \r\n            }\r\n        }\r\n    }\r\n    \r\n    // Call undo / redo with keyboards\r\n    keyCapture(e) { \r\n        e = e || event;\r\n\r\n        // Ctrl + Z combination\r\n        if(e.ctrlKey && e.keyCode === 90) {\r\n            this.undo(cvs, ctx);\r\n        }\r\n        \r\n        // Ctrl + Y combination\r\n        if (e.ctrlKey && e.keyCode === 89) {\r\n            this.redo(cvs, ctx);\r\n        }\r\n    }\r\n}\r\n\r\nexport const history = new History();\r\nconst cvs = theCanvas.canvas;\r\nconst ctx = theCanvas.ctx;\r\n\r\nhistory.undoBtn.addEventListener(\"click\", history.undo.bind(history, cvs, ctx));\r\nhistory.redoBtn.addEventListener(\"click\", history.redo.bind(history, cvs, ctx));\r\ntheCanvas.canvas.addEventListener(\"mousedown\", () => history.saveState(cvs));\r\ndocument.addEventListener(\"keyup\", history.keyCapture.bind(history));\r\n","// Import modules\r\nimport { ui }  from './ui';\r\nimport { inputs } from './inputs';\r\nimport { history } from './controlHistory';\r\nimport { theCanvas }  from './canvas';\r\n\r\n// Import SCSS\r\nimport '../scss/main';\r\n\r\n\r\n// Color picker\r\nconst colorInfo = document.querySelector(\"#color-info\");\r\nlet pickingColor = false;\r\ncolorInfo.addEventListener(\"click\", () => {\r\n    pickingColor = !pickingColor;\r\n})\r\n\r\n// Get the mouse position in the canvas\r\nfunction getElementPosition(obj) {\r\n    let curleft = 0, curtop = 0;\r\n    if (obj.offsetParent) {\r\n        do {\r\n            curleft += obj.offsetLeft;\r\n            curtop += obj.offsetTop;\r\n        } while (obj = obj.offsetParent);\r\n        return { x: curleft, y: curtop };\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Get the canvas position\r\nfunction getEventLocation(element,event){\r\n    const pos = getElementPosition(element);\r\n    \r\n    return {\r\n        x: (event.pageX - pos.x),\r\n      \ty: (event.pageY - pos.y)\r\n    };\r\n}\r\n\r\n// Transform the RGB color to HEX color\r\nfunction rgbToHex(r, g, b) {\r\n    if (r > 255 || g > 255 || b > 255)\r\n        throw \"Invalid color component\";\r\n    return ((r << 16) | (g << 8) | b).toString(16);\r\n}\r\n\r\n// Get the color(image) data from the canvas from the clicked location\r\ntheCanvas.canvas.addEventListener(\"click\", e => {\r\n    if(!pickingColor) return;\r\n\tconst eventLocation = getEventLocation(theCanvas.canvas,e);\r\n    // Get the data of the pixel according to the location generate by the getEventLocation function\r\n    const pixelData = theCanvas.ctx.getImageData(eventLocation.x, eventLocation.y, 1, 1).data; \r\n    // If transparency on the image\r\n    if((pixelData[0] == 0) && (pixelData[1] == 0) && (pixelData[2] == 0) && (pixelData[3] == 0)){\r\n        coord += \" (Transparent color detected, cannot be converted to HEX)\";\r\n    }\r\n    let hex = \"#\" + (\"000000\" + rgbToHex(pixelData[0], pixelData[1], pixelData[2])).slice(-6);\r\n    document.querySelector(\"#colorPalette\").value = hex;\r\n    theCanvas.ctx.strokeStyle = hex;\r\n    // Set the color picker to false after user gets the HEX value for the color\r\n    pickingColor = false;\r\n},false);"]}