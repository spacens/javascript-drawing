{"version":3,"sources":["js/canvas.js","js/inputs.js","js/ui.js","js/controlHistory.js","js/app.js"],"names":["Canvas","lastX","lastY","direction","isDrawing","canvas","document","querySelector","ctx","getContext","clear","lineCap","lineWidth","strokeStyle","needFirstPoint","e","ui","strLineChecked","beginPath","moveTo","lineTo","offsetX","offsetY","stroke","x","y","clearRect","width","height","theCanvas","addEventListener","draw","bind","clearCanvas","drawStraightLine","Inputs","colorInputs","querySelectorAll","colorBoxes","widthInput","heightInput","capWidth","event","holdingSlider","target","value","capDisplay","style","backgroundColor","console","log","keyCode","displayChanges","inputs","changeCapSize","forEach","input","id","fillStyle","fillRect","box","parentID","parentElement","dataset","color","Ui","menu","newProjectWindow","aboutMenu","drawingField","notification","isCanvasCreated","eraserToggled","prevColor","newProjectBtn","startDrawingBtn","goBackBtn","aboutBtn","save","exit","closeAbout","eraser","capTypes","lineTypes","checkboxes","setCanvasProperties","display","displayCanvas","action","classList","add","remove","textContent","cap","checked","name","filter","displayNotification","href","toDataURL","download","change","capSizeText","drawColorText","fillColorText","text","setTimeout","openAndCloseMenu","body","resetData","saveDrawing","className","filterBoxes","displayNewProject","History","redo_list","undo_list","undoBtn","redoBtn","list","keep_redo","push","restoreState","pop","length","saveState","restore_state","src","img","Image","setAttribute","onload","drawImage","ctrlKey","undo","cvs","redo","history","keyCapture","colorInfo","pickingColor","getElementPosition","obj","curleft","curtop","offsetParent","offsetLeft","offsetTop","getEventLocation","element","pos","pageX","pageY","rgbToHex","r","g","b","toString","eventLocation","pixelData","getImageData","data","coord","hex","slice","burger","toggle","infoBtn","infoBox","closeInfoBtn"],"mappings":"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","file":"app.69ccfdb5.map","sourceRoot":"..\\src","sourcesContent":["import { ui } from './ui';\r\n\r\nclass Canvas {\r\n    constructor() {\r\n        this.lastX = 0;\r\n        this.lastY = 0;\r\n        this.direction = true;\r\n        this.isDrawing = false;\r\n        this.canvas = document.querySelector(\"#canvas\");\r\n        this.ctx = this.canvas.getContext(\"2d\");\r\n        this.clear = document.querySelector(\"#clearCanvas\");\r\n\r\n        // Canvas property\r\n        this.ctx.lineCap = \"round\";\r\n        this.ctx.lineWidth = 20;\r\n        this.ctx.strokeStyle = \"#000000\";\r\n\r\n        // Drawing a straight line\r\n        this.needFirstPoint = true;\r\n    }\r\n\r\n    // Draw on the canvas\r\n    draw(e) {\r\n        // If user is not drawing anymore, end the function\r\n        if(!this.isDrawing) return;\r\n\r\n        if(!ui.strLineChecked) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(this.lastX, this.lastY);\r\n            this.ctx.lineTo(e.offsetX, e.offsetY);\r\n            this.ctx.stroke();\r\n    \r\n            // Re-save the position\r\n            this.lastX = e.offsetX;\r\n            this.lastY = e.offsetY;\r\n        }\r\n    }\r\n\r\n    // Draw a straight line between two button clicks\r\n    drawStraightLine(x, y) {\r\n        if(ui.strLineChecked) {\r\n            if(this.needFirstPoint) {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(x, y);\r\n                this.needFirstPoint = false;\r\n            } else {\r\n                this.ctx.lineTo(x, y)\r\n                this.ctx.stroke();\r\n                this.needFirstPoint = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Clear the canvas\r\n    clearCanvas() {\r\n        // Clear the canvas\r\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n    }\r\n\r\n}\r\nexport const theCanvas = new Canvas();\r\n\r\n// Canvas (drawing) event listeners\r\ntheCanvas.canvas.addEventListener(\"mousedown\", e => {\r\n    theCanvas.isDrawing = true;\r\n    theCanvas.lastX = e.offsetX;\r\n    theCanvas.lastY = e.offsetY;\r\n})\r\ntheCanvas.canvas.addEventListener(\"mousemove\", theCanvas.draw.bind(theCanvas));\r\ntheCanvas.canvas.addEventListener(\"mouseup\", () => theCanvas.isDrawing = false);\r\ntheCanvas.canvas.addEventListener(\"mouseout\", () => theCanvas.isDrawing = false);\r\ntheCanvas.clear.addEventListener(\"click\", theCanvas.clearCanvas.bind(theCanvas));\r\ntheCanvas.canvas.addEventListener(\"click\", e => {\r\n    let x = e.offsetX;\r\n    let y = e.offsetY;\r\n    theCanvas.drawStraightLine(x, y);\r\n})\r\n","import { ui } from './ui';\r\nimport { theCanvas } from './canvas'\r\n\r\nclass Inputs {\r\n    constructor() {\r\n        this.colorInputs = document.querySelectorAll(`input[type=\"color\"]`);\r\n        this.colorBoxes = document.querySelectorAll(\".color-box\");\r\n        this.widthInput = document.querySelector(\"#width-input\");\r\n        this.heightInput = document.querySelector(\"#height-input\");\r\n        this.capWidth = document.querySelector(\"#capWidth\");\r\n    }\r\n\r\n    // Change the drawing cap size\r\n    changeCapSize(e) {\r\n        e = e || event;\r\n\r\n        // Change cap size using the slider\r\n        if(ui.holdingSlider) {\r\n            theCanvas.ctx.lineWidth = e.target.value;\r\n            const capDisplay = document.querySelector(\"#capWidth-display\");\r\n            capDisplay.style.width = `${e.target.value}px`;\r\n            capDisplay.style.height = `${theCanvas.ctx.lineWidth}px`;\r\n            capDisplay.style.backgroundColor = theCanvas.ctx.strokeStyle;\r\n            console.log(capDisplay);\r\n        }\r\n\r\n        // If user presses [, decrease size. If user presses ], increase cap size\r\n        if(e.keyCode === 219) {\r\n            theCanvas.ctx.lineWidth--;\r\n            this.capWidth.value = theCanvas.ctx.lineWidth;\r\n        } else if (e.keyCode === 221) {\r\n            theCanvas.ctx.lineWidth++;\r\n            this.capWidth.value = theCanvas.ctx.lineWidth;\r\n        }\r\n\r\n        ui.displayChanges(\"capSize\");\r\n    }\r\n}\r\n\r\nexport const inputs = new Inputs();\r\n\r\n// Input field\r\ninputs.capWidth.addEventListener(\"mousedown\", () => ui.holdingSlider = true)\r\ninputs.capWidth.addEventListener(\"mouseup\", () => {\r\n    ui.holdingSlider = false\r\n    document.querySelector(\"#capWidth-display\").style.width = \"0px\";\r\n    document.querySelector(\"#capWidth-display\").style.height = \"0px\";\r\n})\r\ninputs.capWidth.addEventListener(\"mousemove\", inputs.changeCapSize.bind(inputs));\r\ninputs.capWidth.addEventListener(\"click\", e => {\r\n    theCanvas.ctx.lineWidth = e.target.value;\r\n\r\n    ui.displayChanges(\"capSize\");\r\n});\r\ndocument.addEventListener(\"keydown\", inputs.changeCapSize.bind(inputs));\r\n\r\n// Choose colors for drawing and for the background fill\r\ninputs.colorInputs.forEach(input => input.addEventListener(\"change\", () => {\r\n    if(input.id === 'colorPalette') {\r\n        theCanvas.ctx.strokeStyle = input.value;\r\n\r\n        // Display changes\r\n        ui.displayChanges(\"draw-color\");\r\n    } else if (input.id === \"backgroundColor\") {\r\n        theCanvas.ctx.fillStyle = input.value;\r\n        theCanvas.ctx.fillRect(0, 0, theCanvas.canvas.width, theCanvas.canvas.height);\r\n\r\n        // Display changes\r\n        ui.displayChanges(\"fill-color\", input.value);\r\n    }\r\n}))\r\n\r\ninputs.colorBoxes.forEach(box => box.addEventListener(\"click\", e => {\r\n    let parentID = e.target.parentElement.id;\r\n    if(parentID === \"draw-color\") {\r\n        theCanvas.ctx.strokeStyle = box.dataset.color;\r\n\r\n        // Update the UI with the proper color name\r\n        ui.displayChanges(\"draw-color\");\r\n    } else if (parentID === \"fill-color\") {\r\n        theCanvas.ctx.fillStyle = box.dataset.color;\r\n        theCanvas.ctx.fillRect(0, 0, theCanvas.canvas.width, theCanvas.canvas.height);\r\n        \r\n        // Update the UI with the proper color name\r\n        ui.displayChanges(\"fill-color\", box.dataset.color);\r\n    }\r\n    // console.log(e.target.parentElement.id);\r\n}));","import { theCanvas } from './canvas'\r\nimport { inputs } from './inputs';\r\n\r\nclass Ui {\r\n    constructor() {\r\n        this.menu = document.querySelector(\".main-menu\");\r\n        this.newProjectWindow = document.querySelector(\".new-project_window\");\r\n        this.aboutMenu = document.querySelector(\".about-menu\");\r\n        this.drawingField = document.querySelector(\"#main\");\r\n        this.notification = document.querySelector(\".notification\");\r\n\r\n        this.isCanvasCreated = false;\r\n        this.eraserToggled = false;\r\n        this.prevColor = null;\r\n\r\n        // Buttons\r\n        this.newProjectBtn = document.querySelector(\"#new-project\");\r\n        this.startDrawingBtn = document.querySelector(\"#draw\");\r\n        this.goBackBtn = document.querySelector(\"#goBack\");\r\n        this.aboutBtn = document.querySelector(\"#about\");\r\n        this.save = document.querySelector(\"#saveDrawing\");\r\n        this.exit = document.querySelector(\"#exit\");\r\n        this.closeAbout = document.querySelector(\"#close-about\");\r\n        this.eraser = document.querySelector(\"#eraser\");\r\n\r\n        // Inputs\r\n        this.holdingSlider = false;\r\n        this.capTypes = document.querySelectorAll(\".cap-type\");\r\n        this.lineTypes = document.querySelectorAll(\".line-type\");\r\n        this.checkboxes = document.querySelectorAll(`input[type=\"checkbox\"]`);\r\n\r\n        // Checkbox for toggling between straight line mode on/off\r\n        this.strLineChecked = false;\r\n    }\r\n\r\n    // Reset data\r\n    resetData() {\r\n        // Set defualt canvas properties\r\n        this.setCanvasProperties();\r\n\r\n        theCanvas.canvas.width = 800;\r\n        theCanvas.canvas.height = 500;\r\n        inputs.widthInput.value = 800;\r\n        inputs.heightInput.value = 500;\r\n\r\n        // Reset the information initial canvas was already created\r\n        this.isCanvasCreated = false;\r\n\r\n        // Clear the warning text\r\n        document.querySelector(\"#show-warning\").style.display = \"none\";\r\n\r\n        // Display the reseted changes in the UI (text for the inputs)\r\n        ui.displayChanges(\"all\");\r\n        this.displayCanvas(\"hide\");\r\n    }\r\n\r\n    // Display new project menu\r\n    displayNewProject(action) {\r\n        if(action === \"display\") {\r\n            this.newProjectWindow.style.display = \"block\";\r\n            this.menu.style.display = \"none\";\r\n\r\n            if(this.isCanvasCreated) {\r\n                document.querySelector(\"#show-warning\").style.display = \"block\";\r\n                this.newProjectWindow.classList.add(\"active\");\r\n            }\r\n        } else if (action === \"hide\") {\r\n            this.newProjectWindow.style.display = \"none\";\r\n            \r\n            if(!this.isCanvasCreated) {\r\n                this.menu.style.display = \"block\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // Display canvas\r\n    displayCanvas(action) {\r\n        if(action === \"display\") {\r\n            this.drawingField.style.display = \"grid\";\r\n            this.newProjectWindow.style.display = \"none\";\r\n\r\n            // Pre-set the canvas properties\r\n            this.setCanvasProperties();\r\n\r\n            // Fill in the canvas with color\r\n            theCanvas.ctx.fillStyle = \"#fff\";\r\n            theCanvas.ctx.fillRect(0, 0, theCanvas.canvas.width, theCanvas.canvas.height);\r\n\r\n            // Mark that the initial canvas was created\r\n            this.isCanvasCreated = true;\r\n\r\n        } else if (action === \"hide\") {\r\n            this.menu.style.display = \"block\";\r\n            this.drawingField.style.display = \"none\";\r\n            this.newProjectWindow.classList.remove(\"active\");\r\n\r\n            // If user clicked EXIT, clear the canvas\r\n            theCanvas.clearCanvas();\r\n        }\r\n    }\r\n\r\n    // Set canvas properties and size\r\n    setCanvasProperties() {\r\n        // Set canvas properties\r\n        theCanvas.canvas.width = inputs.widthInput.value;\r\n        theCanvas.canvas.height = inputs.heightInput.value;\r\n        theCanvas.ctx.lineCap = \"round\";\r\n        theCanvas.ctx.lineWidth = 20;\r\n        inputs.capWidth.value = theCanvas.ctx.lineWidth;\r\n        document.querySelector(\"#current-capSize\").textContent =`${theCanvas.ctx.lineWidth}px`;\r\n\r\n        // Reset the values to the default ones\r\n        inputs.capWidth.value = theCanvas.ctx.lineWidth;\r\n        inputs.colorInputs.forEach(input => input.value = \"#000000\");\r\n\r\n        // Reset the checkboxes to default ones\r\n        const checkboxes = [...this.checkboxes];\r\n        checkboxes.forEach(cap => cap.checked = false);\r\n        this.capTypes[0].checked = true;\r\n\r\n        this.displayChanges('all');\r\n    }\r\n\r\n    // About menu\r\n    openAndCloseMenu(action) {\r\n        if(action === \"open\") {\r\n            this.aboutMenu.style.display = \"block\";\r\n        } else if (action === \"close\") {\r\n            this.aboutMenu.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    // Filter the clicked checkboxes and pass their name as a line cap and line join property\r\n    filterBoxes(id, name) {\r\n        let boxes = null;\r\n        if(name === \"cap-type\") {\r\n            // Convert checkboxes node list to an array\r\n            boxes = [...this.capTypes];\r\n\r\n            // Filter the checkboxes\r\n            boxes.filter(box => {\r\n                if(box.id !== id) {\r\n                    // Uncheck all the boxes that DON'T match the ID of the clicked box.\r\n                    box.checked = false;\r\n                } else if(box.id === id) {\r\n                    // If user clicks on the same box that is already checked,\r\n                    // it CAN'T be un-checked\r\n                    box.checked = true;\r\n\r\n                    // Use the clicked box name as a property for the cap type\r\n                    theCanvas.ctx.lineCap = box.name;\r\n                }\r\n            })\r\n        } else {\r\n            boxes = [...this.checkboxes];\r\n\r\n            boxes.filter(box => {\r\n                if(box.id === \"strLine\") {\r\n                    this.strLineChecked = !this.strLineChecked;\r\n                    if(this.strLineChecked) {\r\n                        this.displayNotification(\"Enabled straight line\");\r\n                    } else {\r\n                        this.displayNotification(\"Disabled straight line\");  \r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // Save the drawing\r\n    saveDrawing() {\r\n        this.save.href = theCanvas.canvas.toDataURL();\r\n        this.save.download = \"mypainting.png\"; \r\n    }\r\n\r\n    // Display changes made to the cap size, drawing color and background fill.\r\n    displayChanges(change, value) {\r\n        const capSizeText = document.querySelector(\"#current-capSize\");\r\n        const drawColorText = document.querySelector(\"#current-drawColor\");\r\n        const fillColorText = document.querySelector(\"#current-bgColor\");\r\n\r\n        if(change === \"capSize\") {\r\n            // Change the text value for the cap size\r\n            capSizeText.textContent = `${theCanvas.ctx.lineWidth}px`;\r\n        } else if (change === \"draw-color\") {\r\n            drawColorText.textContent = `${theCanvas.ctx.strokeStyle}`;\r\n        } else if (change === \"fill-color\") {\r\n            fillColorText.textContent = `${value}`;\r\n        } else if (change === \"all\") {\r\n            capSizeText.textContent = `${theCanvas.ctx.lineWidth}px`;\r\n            drawColorText.textContent = `${theCanvas.ctx.strokeStyle}`;\r\n            fillColorText.textContent = `none`;\r\n        }\r\n    }\r\n\r\n    displayNotification(text) {\r\n        // Display notification\r\n        document.querySelector(\"#notification-text\").textContent = text;\r\n        ui.notification.classList.add(\"notificationActive\");\r\n        setTimeout(() => {\r\n            ui.notification.classList.remove(\"notificationActive\");\r\n        }, 1000);\r\n    }\r\n}\r\n\r\nexport const ui = new Ui();\r\n\r\n// About menu event listeners\r\nui.aboutBtn.addEventListener(\"click\", ui.openAndCloseMenu.bind(ui, \"open\"));;\r\nui.closeAbout.addEventListener(\"click\", ui.openAndCloseMenu.bind(ui, \"close\"));\r\ndocument.body.addEventListener(\"keyup\", e => {\r\n    e = e || event;\r\n    if (e.keyCode === 27) {\r\n        ui.openAndCloseMenu(\"close\");\r\n    }\r\n})\r\n\r\n// Draw menu listeners\r\nui.startDrawingBtn.addEventListener(\"click\", ui.displayCanvas.bind(ui, \"display\"));\r\nui.exit.addEventListener(\"click\", ui.resetData.bind(ui));\r\nui.save.addEventListener(\"click\", ui.saveDrawing.bind(ui));\r\nui.checkboxes.forEach(box => box.addEventListener(\"click\", () => {\r\n    const id = box.id;\r\n    const name = box.className;\r\n    ui.filterBoxes(id, name);\r\n}))\r\n\r\n// Toggle eraser on and off\r\nui.eraser.addEventListener(\"click\", () => {    \r\n    ui.eraserToggled = !ui.eraserToggled;\r\n    \r\n    if(ui.eraserToggled) {\r\n        // We save the value of the previously used color before using the eraser\r\n        ui.prevColor = theCanvas.ctx.strokeStyle;\r\n\r\n        // We set the stroke color to the default canvas color\r\n        theCanvas.ctx.strokeStyle = \"#fff\";\r\n\r\n        // Display a notification\r\n        ui.displayNotification(\"Enabled Eraser\");\r\n    } else {\r\n        // We restore the stroke color to the saved value\r\n        theCanvas.ctx.strokeStyle = ui.prevColor;\r\n        ui.displayNotification(\"Disabled Eraser\");\r\n    }\r\n})\r\n\r\n// Toggle between main menu and new project window that leads towrads the canvas\r\nui.newProjectBtn.addEventListener(\"click\", ui.displayNewProject.bind(ui, 'display'));\r\nui.goBackBtn.addEventListener(\"click\", ui.displayNewProject.bind(ui, 'hide'));\r\n\r\ndocument.querySelector(\"#canvas-size\").addEventListener(\"click\", ui.displayNewProject.bind(ui, \"display\"));","import { theCanvas } from './canvas';\r\nimport { ui } from './ui';\r\n\r\nclass History { \r\n    constructor() {\r\n        this.redo_list = [];\r\n        this.undo_list = [];\r\n        \r\n        // Undo & Redo buttons\r\n        this.undoBtn = document.querySelector(\"#undo\");\r\n        this.redoBtn = document.querySelector(\"#redo\");\r\n    }\r\n\r\n    // Save the state\r\n    saveState(canvas, list, keep_redo) {\r\n        keep_redo = keep_redo || false;\r\n        if(!keep_redo) {\r\n            this.redo_list = [];\r\n        }\r\n        \r\n        (list || this.undo_list).push(canvas.toDataURL());  \r\n    }\r\n\r\n    // Undo action\r\n    undo(canvas, ctx) {\r\n        this.restoreState(canvas, ctx, this.undo_list, this.redo_list);\r\n        ui.displayNotification(\"Undo\");\r\n    }\r\n\r\n    // Redo action\r\n    redo(canvas, ctx) {\r\n      this.restoreState(canvas, ctx, this.redo_list, this.undo_list);\r\n      ui.displayNotification(\"Redo\");        \r\n    }\r\n\r\n    // Restore the state\r\n    restoreState(canvas, ctx, pop, push) {\r\n        if(pop.length) {\r\n            this.saveState(canvas, push, true);\r\n            var restore_state = pop.pop();\r\n            const src = restore_state;\r\n    \r\n            const img = new Image();\r\n            img.setAttribute('src', src);\r\n            img.onload = function() {\r\n              ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n              ctx.drawImage(img, 0, 0, canvas.width, canvas.height);  \r\n            }\r\n        }\r\n    }\r\n    \r\n    // Call undo / redo with keyboards\r\n    keyCapture(e) { \r\n        e = e || event;\r\n\r\n        // Ctrl + Z combination\r\n        if(e.ctrlKey && e.keyCode === 90) {\r\n            this.undo(cvs, ctx);\r\n        }\r\n        \r\n        // Ctrl + Y combination\r\n        if (e.ctrlKey && e.keyCode === 89) {\r\n            this.redo(cvs, ctx);\r\n        }\r\n    }\r\n}\r\n\r\nexport const history = new History();\r\nconst cvs = theCanvas.canvas;\r\nconst ctx = theCanvas.ctx;\r\n\r\nhistory.undoBtn.addEventListener(\"click\", history.undo.bind(history, cvs, ctx));\r\nhistory.redoBtn.addEventListener(\"click\", history.redo.bind(history, cvs, ctx));\r\ntheCanvas.canvas.addEventListener(\"mousedown\", () => history.saveState(cvs));\r\ndocument.addEventListener(\"keyup\", history.keyCapture.bind(history));\r\n","// Import modules\r\nimport { ui }  from './ui';\r\nimport { inputs } from './inputs';\r\nimport { history } from './controlHistory';\r\nimport { theCanvas }  from './canvas';\r\n\r\n// Import SCSS\r\nimport '../scss/main';\r\n\r\n\r\n// Color picker\r\nconst colorInfo = document.querySelector(\"#color-info\");\r\nlet pickingColor = false;\r\ncolorInfo.addEventListener(\"click\", function() {\r\n    pickingColor = !pickingColor;\r\n\r\n    // Display notification\r\n    \r\n    if(pickingColor) {\r\n        this.style.color = \"#444\"\r\n        ui.displayNotification(\"Enabled color picker\");\r\n    } else {\r\n        this.style.color = \"#0097e6\"\r\n        ui.displayNotification(\"Disabled color picker\");\r\n    }\r\n})\r\n\r\n// Get the mouse position in the canvas\r\nfunction getElementPosition(obj) {\r\n    let curleft = 0, curtop = 0;\r\n    if (obj.offsetParent) {\r\n        do {\r\n            curleft += obj.offsetLeft;\r\n            curtop += obj.offsetTop;\r\n        } while (obj = obj.offsetParent);\r\n        return { x: curleft, y: curtop };\r\n    }\r\n    return undefined;\r\n}\r\n\r\n// Get the canvas position\r\nfunction getEventLocation(element,event){\r\n    const pos = getElementPosition(element);\r\n    \r\n    return {\r\n        x: (event.pageX - pos.x),\r\n      \ty: (event.pageY - pos.y)\r\n    };\r\n}\r\n\r\n// Transform the RGB color to HEX color\r\nfunction rgbToHex(r, g, b) {\r\n    if (r > 255 || g > 255 || b > 255)\r\n        throw \"Invalid color component\";\r\n    return ((r << 16) | (g << 8) | b).toString(16);\r\n}\r\n\r\n// Get the color(image) data from the canvas from the clicked location\r\ntheCanvas.canvas.addEventListener(\"click\", e => {\r\n    if(!pickingColor) return;\r\n\tconst eventLocation = getEventLocation(theCanvas.canvas,e);\r\n    // Get the data of the pixel according to the location generate by the getEventLocation function\r\n    const pixelData = theCanvas.ctx.getImageData(eventLocation.x, eventLocation.y, 1, 1).data; \r\n    // If transparency on the image\r\n    if((pixelData[0] == 0) && (pixelData[1] == 0) && (pixelData[2] == 0) && (pixelData[3] == 0)){\r\n        coord += \" (Transparent color detected, cannot be converted to HEX)\";\r\n    }\r\n\r\n    // Update the UI with the HEX color value\r\n    let hex = \"#\" + (\"000000\" + rgbToHex(pixelData[0], pixelData[1], pixelData[2])).slice(-6);\r\n    document.querySelector(\"#colorPalette\").value = hex;\r\n    theCanvas.ctx.strokeStyle = hex;\r\n    document.querySelector(\"#current-drawColor\").textContent = hex;\r\n\r\n    // Reset the color picker color to default\r\n    colorInfo.style.color = \"#0097e6\";\r\n\r\n    // Display a notification for the color picker\r\n    ui.displayNotification(\"Disabled color picker\");\r\n\r\n    // Set the color picker to false after user gets the HEX value for the color\r\n    pickingColor = false;\r\n},false);\r\n\r\n// Burger menu\r\nconst burger = document.querySelector(\".burger-menu\");\r\nburger.addEventListener(\"click\", () => {\r\n    // Toggle active class on the burger and controls container\r\n    burger.classList.toggle(\"active\");\r\n    document.querySelector(\".controls\").classList.toggle(\"controlsActive\");\r\n\r\n    // Toggle active class on the main section - container for canvas and controls section\r\n    setTimeout(() => {\r\n        document.querySelector(\"#main\").classList.toggle(\"mainDisplay\");\r\n    }, 50);\r\n})\r\n\r\n// Info box\r\nconst infoBtn = document.querySelector(\"#info\");\r\nconst infoBox = document.querySelector(\".info-box\");\r\nconst closeInfoBtn = document.querySelector(\"#close-info\");\r\ninfoBtn.addEventListener(\"click\", () => {\r\n    infoBox.style.display = \"flex\";\r\n})\r\ncloseInfoBtn.addEventListener(\"click\", () => {\r\n    infoBox.style.display = \"none\";\r\n})\r\n"]}